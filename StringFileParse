#include "Lab1Header.h"
#include <iostream>
#include <fstream>
#include <sstream>
using namespace std;



int main(int argc, char* argv[]) {
	if (argc != 2) {
		int standard;
		standard = basics::programname;
		return useful(argv[standard]);
	}
	
	vector<string> vect;		//declare vector to be inputted into 'parse'
	int stand;
	stand = basics::inputfile;
	int compare = parse(vect, argv[inputfile]);		//vect is now filled with strings
	
	int comp;
	comp = cases::good;
	
	if (compare != good) {		//check that there were no errors in running 'parse', if so then return error message
		return compare;
	}
	
	vector<int> digits;
	
	int tempint;
	string mystring;
	for(unsigned int j = 0; j < vect.size(); j++){
		mystring = vect[j];
		bool isint = true;
		for (unsigned int z = 0; z < mystring.size(); z++) {
			if (!isdigit(mystring[z])) {
				isint = false;
			}	
		}
		if (isint) {
			istringstream ss(mystring);
			ss >> tempint;
			digits.push_back(tempint);
		}
		else {
			std::cout << mystring << endl;
		}
	}
	
	for (unsigned int k = 0; k < digits.size(); ++k) {
		
		std::cout << digits[k] << endl;
	}
	
	return comp;
}

int parse(vector<string>& apple, char* banana) {
	ifstream streamer;
	streamer.open(banana);
	if (streamer.is_open()) {			//verify that file is open, NEED TO: iterate through file and extract one string at a time
		if (streamer.peek()== EOF){
			streamer.close();
			int whathappened;
			whathappened = cases::emptyfile;
			cout << whathappened << endl;
			return whathappened;
		}
		
		string line_1;
		
		while (streamer >> line_1) {
			apple.push_back(line_1);      //pushing the extracted string into the parameter vector
		}
		
		
		
	}
	else {

		int whathappened;
		whathappened = cases::cannotopen;
		cout<< whathappened <<endl;
		return whathappened;
	}
	streamer.close();
	int whathappened;
	whathappened = cases::good;
	
	return whathappened;
}

int useful(char* pear) {
	
	int whathappened;
	whathappened = cases::wrongnum;
	cout <<"usage:" << pear << " <input_file_name>" << endl;
	return whathappened;
}
